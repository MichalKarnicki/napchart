window.helpers={},console.horse=function(){console.log("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHhhhhho")},helpers.merge=function(e,t){for(var n,r,e=helpers.clone(e),a=[],i=[],o=0;o<t.length;o++)for(count in e[t[o]])a.push(e[t[o]][count]);for(var o=0;o<a.length;o++)n=a[o].start,r=a[o].end,n>r&&(a[o].end=1440,a.push({start:0,end:r}));a=a.sort(function(e,t){return e.start-t.start}),i.push(a[0]);for(var o=1;o<a.length;o++)n=a[o].start,r=a[o].end,prevEnd=i[i.length-1].end,n<=prevEnd&&r>prevEnd?i[i.length-1].end=r:n>prevEnd&&i.push({start:n,end:r});return i},helpers.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)}}(),helpers.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(e){return window.clearTimeout(e,1e3/60)}}(),helpers.easingEffects={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-1*e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return 1*((e=e/1-1)*e*e+1)},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-1*((e=e/1-1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return 1*(e/=1)*e*e*e*e},easeOutQuint:function(e){return 1*((e=e/1-1)*e*e*e*e+1)},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return-1*Math.cos(e/1*(Math.PI/2))+1},easeOutSine:function(e){return 1*Math.sin(e/1*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e/1)-1)},easeInExpo:function(e){return 0===e?1:1*Math.pow(2,10*(e/1-1))},easeOutExpo:function(e){return 1===e?1:1*(-Math.pow(2,-10*e/1)+1)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(-Math.pow(2,-10*--e)+2)},easeInCirc:function(e){return e>=1?e:-1*(Math.sqrt(1-(e/=1)*e)-1)},easeOutCirc:function(e){return 1*Math.sqrt(1-(e=e/1-1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1==(e/=1)?1:(n||(n=.3),r<Math.abs(1)?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),-(r*Math.pow(2,10*(e-=1))*Math.sin((1*e-t)*(2*Math.PI)/n)))},easeOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1==(e/=1)?1:(n||(n=.3),r<Math.abs(1)?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*e)*Math.sin((1*e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:2==(e/=.5)?1:(n||(n=1*(.3*1.5)),r<Math.abs(1)?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),e<1?-.5*(r*Math.pow(2,10*(e-=1))*Math.sin((1*e-t)*(2*Math.PI)/n)):r*Math.pow(2,-10*(e-=1))*Math.sin((1*e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return 1*(e/=1)*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return 1*((e=e/1-1)*e*((t+1)*e+t)+1)},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?.5*(e*e*(((t*=1.525)+1)*e-t)):.5*((e-=2)*e*(((t*=1.525)+1)*e+t)+2)},easeInBounce:function(e){return 1-easingEffects.easeOutBounce(1-e)},easeOutBounce:function(e){return(e/=1)<1/2.75?1*(7.5625*e*e):e<2/2.75?1*(7.5625*(e-=1.5/2.75)*e+.75):e<2.5/2.75?1*(7.5625*(e-=2.25/2.75)*e+.9375):1*(7.5625*(e-=2.625/2.75)*e+.984375)},easeInOutBounce:function(e){return e<.5?.5*easingEffects.easeInBounce(2*e):.5*easingEffects.easeOutBounce(2*e-1)+.5}},helpers.clone=function(e){var t=JSON.stringify(e);return"undefined"!=typeof t?JSON.parse(t):{}},helpers.overwrite=function(e,t){return $.extend(!0,e,t)},helpers.compare=function(e,t){return JSON.stringify(e)==JSON.stringify(t)},helpers.shortestWay=function(e){return console.log(e),e<-720?calc(1440,e):e>720?e-1440:e},helpers.range=function(e,t){return t<e?1440-e+t:t-e},helpers.getPositionBetweenTwoValues=function(e,t,n){return helpers.range(t,e)/helpers.range(t,n)},helpers.middle=function(e,t){var n,r;return n=helpers.range(e,t),r=helpers.calc(e,n/2)},helpers.rangeObject=function(e){return range(e.start,e.end)},helpers.middlepointFinder=function(e){return calc(rangeObject(e)/2,e.start)},helpers.calc=function(e,t){return e+t<0?e+t+1440:e+t>1440?e+t-1440:e+t},helpers.pointIsInside=function(e,t,n){if(n>t){if(e<n&&e>t)return!0}else if(t>n&&(e>t||e<n))return!0;return e==t||e==n},helpers.isInside=helpers.pointIsInside,helpers.minutesToClock=function(e){return e=Math.floor(e),e>=1440&&(e-=1440),hours=Math.floor(e/60)+"",e=e%60+"",1==hours.length&&(hours="0"+hours),1==e.length&&(e="0"+e),settings.getValue("ampm")?helpers.clockToAMPM(hours+e):hours+e},helpers.clockToAMPM=function(e){var t=parseInt(e.substring(0,2),10),n=(t+11)%12+1,r=t>11?"pm":"am",a=e.substring(2);return n+":"+a+r},helpers.clockToMinutes=function(e){var t,n,r;return 4!=e.length?void console.warn("clock value not correct length"):(t=e.substring(0,2),n=1*e.substring(2,4),r=n+60*t)},helpers.degreesToRadiens=function(e){return Math.PI/180*e},helpers.minutesToRadians=function(e){return Math.PI/720*(e-360)},helpers.minutesToHoursMinutes=function(e){return hours=Math.floor(e/60)+"",minutes=e%60+"",minutes=Math.floor(minutes),{hours:hours,minutes:minutes}},helpers.minutesToReadable=function(e,t){var n;return"undefined"==typeof t&&(t=60),e>t?(n=helpers.minutesToHoursMinutes(e),n.hours+"h "+n.minutes+"m"):e+"m"},helpers.minutesToXY=function(e,t,n,r){if("undefined"==typeof n)var n=0;if("undefined"==typeof r)var r=0;return o={},o.y=Math.sin(e/1440*(2*Math.PI)-Math.PI/2)*t+r,o.x=Math.cos(e/1440*(2*Math.PI)-Math.PI/2)*t+n,o},helpers.distance=function(e,t,n,r){var a=r-t,i=n-e;return Math.sqrt(a*a+i*i)},helpers.XYtoMinutes=function(e,t){return minutes=Math.atan(t/e)/(2*Math.PI)*1440+360,e<0&&(minutes+=720),minutes=Math.round(minutes),minutes},window.napchartCore=function(){var e,t,n;return e={},n=[],t=document.getElementById("canvas"),{initialize:function(e){"undefined"==typeof e&&(e={}),settings.initialize(document.getElementById("settings")),draw.initialize(t),interactCanvas.initialize(t),draw.drawUpdate(),formInput.initialize(document.getElementById("formInputContainer")),dom.bindAddButtons(),dom.bindSaveButton(document.getElementById("saveContainer")),statistics.initialize(document.getElementById("stat-container")),sampleSchedule.initialize(document.getElementById("sampleSchedules")),sampleSchedule.detectSchedule(e),chartHistory.initialize(e),feedback.initialize(),dom.init(),"undefined"!=typeof fromServer&&napchartCore.setSchedule(fromServer.data)},setSchedule:function(t){e=helpers.clone(t),formInput.setData(e),statistics.update(e),textSerialize.update(e),dom.setOG(draw.getImage)},getSchedule:function(){return JSON.parse(JSON.stringify(e))},addElement:function(t,n){"undefined"==typeof e[t]&&(e[t]=[]),e[t].push(n),this.setSchedule(e),sampleSchedule.detectSchedule(e),chartHistory.add(e,"added "+t)},removeElement:function(t,n){e[t].splice(n,1),this.setSchedule(e),sampleSchedule.detectSchedule(e),chartHistory.add(e,"removed "+t+" "+(n-1))},start:function(){},howMany:function(t){return"undefined"==typeof e[t]&&(e[t]=[]),e[t].length},lastElement:function(t){return"undefined"==typeof e[t]?(console.warn("lastElement received an undefined name"),!1):e[t][e[t].length-1]},returnElement:function(t,n){return"undefined"==typeof e[t]&&"undefined"==typeof e[t][n]&&console.warn("Specified element does not exist"),e[t][n]},elementExists:function(t,n){return"undefined"!=typeof e[t]&&"undefined"!=typeof e[t][n]},modifyElement:function(t,n,r){"undefined"==typeof e[t][n]&&console.warn("Specified element does not exist");for(var a in r)e[t][n][a]=r[a];this.setSchedule(e)},getCanvas:function(){return t},setSelected:function(e,t){for(var r=0;r<n.length;r++)if(n[r].name==e&&n[r].count==t)return void console.log("sh");n.push({name:e,count:t}),formInput.setSelected(n),animate.frameAnimator(function(e){interactCanvas.setSelectedOpacity(e),draw.drawUpdate()})},isSelected:function(e,t){for(var r=0;r<n.length;r++)if(e==n[r].name&&t==n[r].count)return!0;return!1},deselect:function(e,t){if("undefined"==typeof e)return n=[],void formInput.setSelected();for(var r=0;r<n.length;r++)n[r].name==e&&n[r].count==t&&n.splice(r,1);formInput.setSelected(n)},returnSelected:function(){return n},setURL:function(e){textSerialize.setChartid(e),window.location.pathname!="/"+e?window.history.pushState({chartid:e},"","/"+e):console.info("url was right",e),dom.setURL(e),chartHistory.setChartid(e)},dmToggle:function(e){dom.dmToggle(e),draw.dmToggle(e)},startLoading:function(){dom.startLoading()},finishLoading:function(){dom.finishLoading()}}}(),$(document).ready(function(){var e={},t=!1;"undefined"!=typeof fromServer.data&&"undefined"!=typeof fromServer.chartid&&(e=fromServer.data,t=fromServer.chartid),napchartCore.initialize(e),t&&napchartCore.setURL(t)}),window.dom=function(){var e=document.getElementById("saveButton"),t=document.getElementById("urlField");return{bindAddButtons:function(){document.getElementById("addCore").addEventListener("click",function(){barhandler.addBar("core")}),document.getElementById("addNap").addEventListener("click",function(){barhandler.addBar("nap")}),document.getElementById("addBusy").addEventListener("click",function(){barhandler.addBar("busy")}),document.getElementById("removeAll").addEventListener("click",function(){barhandler.removeAllBars()})},bindRemoveButtons:function(e){$(e).on("click",".remove",function(){var e,t;e=$(this).parent().find('[name="name"]').val(),t=$(this).parent().find('[name="count"]').val(),console.log(e,t),napchartCore.isSelected(e,t)&&napchartCore.deselect(e,t),napchartCore.removeElement(e,t)})},bindSaveButton:function(){$(e).on("click",function(){var e=napchartCore.getSchedule();server.saveNew(e)})},showNavExtension:function(){console.log("etnhs"),$(NAV_EXT).show()},setURL:function(e){var n;n="http://"+fromServer.url+"/"+e,"none"==$(t).css("display")&&($(t).show(),$(t).css("width","220px")),t.value=n},setOG:function(e){$("meta[name=og\\:image]").attr("content",e)},startLoading:function(){"none"==$(t).css("display")&&($(t).show(),$(t).css("width","220px")),$(t).addClass("loading"),t.value="loading"},finishLoading:function(){$(t).removeClass("loading")},bindBackForward:function(){$(document).on("click","#back",function(){chartHistory.back()}),$(document).on("click","#forward",function(){chartHistory.forward()})},dmToggle:function(e){1==e?($("body").addClass("dark"),$("body *").addClass("dark")):($("body").removeClass("dark"),$("body *").removeClass("dark"),$("body").addClass("darkoff"),$("body *").addClass("darkoff"))},init:function(){$("#bitcoinlink").click(function(e){e.preventDefault(),$(this).children().toggleClass("hidden"),$("#bitcoininfo").toggleClass("hidden")})}}}(),window.feedback=function(){function e(e){e.stopPropagation(),e.preventDefault();var t=$(a).find("textarea").val();$(a).find("#feedback-error").addClass("hidden"),$(a).find("#feedback-devthanks").addClass("hidden"),n(),server.sendFeedback(t,function(e,t){console.info(t),e?$(a).find("#feedback-error").removeClass("hidden"):($(a).find("#feedback-devthanks").removeClass("hidden"),$(a).find("#token").val(t)),r()})}function t(e){e.stopPropagation(),e.preventDefault();var t=$(a).find("#email").val(),i=$(a).find("#token").val();n(),server.linkEmailToFeedback(i,t,function(e,t){console.info(t),e?$(a).find("#linkemailerror").removeClass("hidden"):$(a).find("#linkemailsuccess").removeClass("hidden"),r()})}function n(){$(a).find(".loading-wheel").removeClass("hidden"),$(a).find(".arm").hide()}function r(){$(a).find(".loading-wheel").addClass("hidden"),$(a).find(".arm").show(),$(a).find("textarea").val(""),$(a).find("#email").val(""),$(a).find(".emailoptional").removeClass("hidden")}var a;return{initialize:function(){return 0==$(".feedback").length?void console.warn("could not find feedback container"):(a=$(".feedback")[0],$("#send-feedback").on("mousedown touchstart",e),void $("#linkEmail").on("mousedown touchstart",t))}}}(),window.sampleSchedule=function(){function e(e){var t=0,n=0;return"undefined"!=typeof e.nap&&(t=e.nap.length),"undefined"!=typeof e.core&&(n=e.core.length),1===n&&0===t?"monophasic":2===n&&0===t?"segmented":1===n&&1===t?"siesta":2===n&&1===t?"dualcore1":0===n&&3===t?"triphasic":1===n&&t>=2?"everyman":0===n&&6===t?"uberman":"none"}function t(e){var t=e.id;if("undefined"==typeof a[t])throw new Error("Could not find the schedule requested");var r=napchartCore.getSchedule(),i=a[t];"undefined"!=typeof r.busy&&(i.busy=r.busy),n(t,!1),napchartCore.setSchedule(i),chartHistory.add(i,"changed to preset scedule "+t)}function n(e,t){var n=r,a=n.querySelector("#scheduleIndicator"),i=n.querySelector("#"+e),o=n.getBoundingClientRect().top,s=i.getBoundingClientRect().top,d=s-o;return $(n).children().removeClass("selected"),"none"==e?void $(a).fadeOut():(a.style.display="block",$(i).addClass("selected"),void(t?$(a).animate({top:d}):a.style.top=d+"px"))}var r,a={monophasic:{core:[{start:1410,end:450}]},siesta:{core:[{start:1380,end:240}],nap:[{start:780,end:870}]},segmented:{core:[{start:1320,end:90},{start:210,end:420}]},dualcore1:{core:[{start:1320,end:90},{start:390,end:480}],nap:[{start:960,end:980}]},triphasic:{core:[],nap:[{start:390,end:480},{start:870,end:960},{start:1350,end:1440}]},everyman:{core:[{start:1260,end:30}],nap:[{start:250,end:270},{start:880,end:900},{start:490,end:510}]},uberman:{nap:[{start:960,end:980},{start:480,end:500},{start:720,end:740},{start:1200,end:1220},{start:0,end:20},{start:240,end:260}]}};return{initialize:function(e){r=e;var n=e.getElementsByClassName("sampleSchedule");for(i=0;i<n.length;i++)n[i].addEventListener("click",function(){t(this)})},getSchedules:function(){return a},detectSchedule:function(t){var r=e(t);n(r,!0)}}}(),window.server=function(){function e(e,t){e?napchartCore.setURL(t):alert("Something went wrong:\n\n"+t),n(),console.log(t)}function t(){napchartCore.startLoading()}function n(){napchartCore.finishLoading()}return{saveNew:function(n){t();var r=chartHistory.checkIfExists(n);if(r)return void e(!0,r);var a=JSON.stringify(n);$.post("post",{data:a}).done(function(t){e(!0,t)}).fail(function(t){console.error(t),e(!1,JSON.stringify(t))})},sendFeedback:function(e,t){$.post("/post/feedback",{message:e}).done(function(e){t(null,e)}).fail(function(e){t(e)})},linkEmailToFeedback:function(e,t,n){$.post("/post/linkEmailToFeedback",{token:e,email:t}).done(function(e){console.log(JSON.stringify(e,null,2)),n(null,"success")}).fail(function(e){n(e)})},load:function(){},save:function(){}}}(),window.settings=function(){function e(){$(n).find("#showAllElements").on("change",function(){formInput.setSettings({showAllElements:t("showAllElements")})}),$(n).find("#napDuration").on("change",function(){barhandler.setSettings({napDuration:t("napDuration")})}),$(n).find("#ampm").on("change",function(){1==this.checked?(draw.changeClockConfig("numberRadius",46),draw.changeClockConfig("timeLocation",6)):(draw.changeClockConfig("numberRadius",44),draw.changeClockConfig("timeLocation",4)),draw.reInit()}),$(n).find("#darkmode").on("change",function(){1==this.checked?napchartCore.dmToggle(!0):napchartCore.dmToggle(!1)})}function t(e){var t,r=$(n).find("#"+e)[0];return t="checkbox"==r.type?r.checked:r.value}var n;return{initialize:function(t){n=t,console.log($(n).find("#showAllElements").length),e()},getValue:function(e){return t(e)}}}(),window.animate=function(){return easingEffects=helpers.easingEffects,{frameAnimator:function(e,t,n){var r,a,i,o,s;i=0,s=6,o=easingEffects[t]||easingEffects.linear;var d=function(){i++,r=i/s,a=o(r),e(a),i<s&&helpers.requestAnimFrame.call(window,d)};helpers.requestAnimFrame.call(window,d)}}}(),window.barhandler=function(){return barAddRules={core:{size:120,location:1410,distance:90},nap:{size:20,location:960,distance:60},busy:{size:60,location:540,distance:60,specific:{0:{size:480}}}},{addBar:function(e){var t=napchartCore.howMany(e),n=napchartCore.lastElement(e),r={};for(var a in barAddRules[e])"undefined"!=typeof barAddRules[e].specific&&"undefined"!=typeof barAddRules[e].specific[t]&&"undefined"!=typeof barAddRules[e].specific[t][a]?r[a]=barAddRules[e].specific[t][a]:r[a]=barAddRules[e][a];if(t>0)var i=helpers.calc(n.end,r.distance);else var i=r.location;var o=helpers.calc(i,r.size);obj={start:i,end:o},napchartCore.addElement(e,obj)},removeBar:function(e,t){napchartCore.removeElement(e,t)},removeAllBars:function(e){var t=napchartCore.getSchedule();for("undefined"==typeof e&&(e=Object.keys(t)),i=0;i<e.length;i++)delete t[e[i]];napchartCore.setSchedule(t),sampleSchedule.detectSchedule(t),chartHistory.add(napchartCore.getSchedule(),"removed all")},setSettings:function(e){console.log(e),barAddRules.nap.size=1*e.napDuration}}}(),window.draw=function(){function e(e,t){for(var n=0,r=36*draw.ratio,a=0;a<t.length;a++)"line"==t[a].type&&(n+=t[a].minutes);var i=1440-n;if(i<0)throw new Error("too much space is given to straight segments in the shape");for(var o=0,a=0;a<t.length;a++)t[a].angle=o,"arc"==t[a].type&&(o+=t[a].radians);for(var s,a=0;a<t.length;a++)"arc"==t[a].type&&(t[a].minutes=t[a].radians/o*i,t[a].pathLength=2*r*Math.PI*(t[a].radians/(2*Math.PI)),0==a&&(s=t[a].pathLength/t[a].minutes));for(var a=0;a<t.length;a++)"line"==t[a].type&&(console.log(s),t[a].pathLength=t[a].minutes*s);for(var d=0,a=0;a<t.length;a++)t[a].start=d,t[a].end=d+t[a].minutes,d+=t[a].minutes;for(var a=0;a<t.length;a++)console.log(a),0==a?t[a].centre={x:draw.w/2,y:draw.h/2}:(console.log("warning"),t[a].centre=t[a-1].endCentre),"line"==t[a].type?(console.log(t[a]),t[a].endCentre={x:t[a].centre.x+Math.cos(t[a].angle)*t[a].pathLength,y:t[a].centre.y+Math.sin(t[a].angle)*t[a].pathLength}):t[a].endCentre=t[a].centre;draw.shape=t}function t(e,t,n,r,a){if("undefined"==typeof a)var a=!1;var i={x:draw.w/2,y:draw.h/2},o=t*draw.ratio,s={x:i.x,y:i.y-o},d=helpers.clone(draw.shape);a&&d.reverse();for(var c,l,u=0;u<d.length;u++){var h=d[u];helpers.isInside(n,h.start,h.end)&&(c=u),helpers.isInside(r,h.start,h.end)&&(l=u)}console.log(c,l);var f,p=[],m=!1;f=a?{start:1,end:0}:{start:0,end:1};for(var u=c;u<d.length;u++){var v={shape:d[u],start:f.start,end:f.end};if(u==c&&(v.start=helpers.getPositionBetweenTwoValues(n,d[u].start,d[u].end)),u==l&&(v.end=helpers.getPositionBetweenTwoValues(r,d[u].start,d[u].end)),(u==c&&u==l&&v.end>v.start&&a||v.end<v.start&&!a)&&(0==p.length?(v.end=f.end,m=!0):v.start=f.start),p.push(v),u==l){if(!m)break;m=!1}u==d.length-1&&(u=-1)}for(var u=0;u<p.length;u++){var d=p[u].shape;if("arc"==d.type){var g=d.angle-Math.PI/2,n=g+p[u].start*d.radians,r=g+p[u].end*d.radians;e.arc(d.centre.x,d.centre.y,o,n,r,a);var w=d.angle+d.radians-Math.PI/2;s.x=i.x+Math.cos(w)*o,s.y=i.y+Math.sin(w)*o}else if("line"==d.type){var y={x:Math.cos(d.angle)*d.pathLength,y:Math.sin(d.angle)*d.pathLength},g={x:d.centre.x+Math.sin(d.angle)*o,y:d.centre.y-Math.cos(d.angle)*o},n={x:g.x+y.x*p[u].start,y:g.y+y.y*p[u].start},r={x:g.x+y.x*p[u].end,y:g.y+y.y*p[u].end};0==u&&e.lineTo(n.x,n.y),e.lineTo(r.x,r.y)}}helpers.isInside(n,0,600)}function n(e,n,r,a,i){e.beginPath(),t(e,n,a,i),t(e,r,i,a,!0),e.closePath()}function r(e,t,n){var r,a,i,o,s,d,c,e=JSON.parse(JSON.stringify(e));if("undefined"==typeof e[t]||0==e[t].length)return e;if("undefined"==typeof e[n]||0==e[n].length)return e;for(var l=e[t].length,u=0;u<l;u++){r=e[t][u].start,a=e[t][u].end,c=[];for(var h=0;h<e[n].length;h++)i=e[n][h].start,o=e[n][h].end,s=helpers.pointIsInside(i,r,a),d=helpers.pointIsInside(o,r,a),(s||d)&&(i=helpers.calc(i,-10),o=helpers.calc(o,10),c.push({start:i,end:o}));if(c.length>0){c=c.sort(function(e,t){return e.start-t.start});for(var f=[e[t][u]],p=0;p<c.length;p++){var m,v,g=f.length-1;m=f[g].start,v=f[g].end;var s=helpers.pointIsInside(c[p].start,m,v),d=helpers.pointIsInside(c[p].end,m,v);s&&d?(f[g]={start:m,end:c[p].start},f.push({start:c[p].end,end:v})):s?f[g]={start:m,end:c[p].start}:d&&(f[g]={start:c[p].end,end:v})}for(e[t][u]={},p=0;p<f.length;p++)f[p].phantom=u;e[t]=e[t].concat(f)}}return e}function a(e){var t=40*draw.ratio;for(e.save(),e.strokeStyle=S.strokeColor,e.lineWidth=S.stroke*draw.ratio,e.beginPath(),e.translate(draw.w/2,draw.h/2),i=0;i<12;i++)c=helpers.minutesToXY(60*i,t),e.moveTo(c.x,c.y),c=helpers.minutesToXY(60*i+720,t),e.lineTo(c.x,c.y);e.closePath(),e.stroke(),e.restore()}function o(e){var t=40*draw.ratio;e.save(),e.translate(draw.w/2,draw.h/2),e.beginPath(),e.strokeStyle=S.impStrokeColor,e.lineWidth=S.stroke*draw.ratio,c=helpers.minutesToXY(0,t),e.moveTo(c.x,c.y),c=helpers.minutesToXY(720,t),e.lineTo(c.x,c.y),c=helpers.minutesToXY(240,t),e.moveTo(c.x,c.y),c=helpers.minutesToXY(960,t),e.lineTo(c.x,c.y),c=helpers.minutesToXY(480,t),e.moveTo(c.x,c.y),c=helpers.minutesToXY(1200,t),e.lineTo(c.x,c.y),e.closePath(),e.stroke(),e.restore()}function d(e){var n=S.circles;for(e.strokeStyle=S.strokeColor,e.lineWidth=S.stroke*draw.ratio,i=0;i<n.length;i++)e.beginPath(),t(e,n[i].radius,0,1439),e.stroke()}function l(e,t){var n=draw.w,r=draw.h;impfontpixels=5*draw.ratio,e.fillStyle=S.clockNumbers.color,numberRadius=S.clockNumbers.radius*draw.ratio,e.font=impfontpixels+"px Verdana",e.textAlign="center",e.textBaseline="middle";var a={0:"Midnight",4:"4 AM",8:"8 AM",12:"Noon",16:"4 PM",20:"8 PM"};for(i=0;i<24;i++)0!==i&&4!=i&&16!=i&&20!=i&&8!=i&&12!=i||(degrees=helpers.degreesToRadiens(15*i+270),xval=n/2+Math.cos(degrees)*numberRadius,yval=r/2+Math.sin(degrees)*numberRadius,t?e.fillText(a[i],xval,yval):e.fillText(i,xval,yval))}function u(e,n){var r=draw.w,a=draw.h;e.save(),e.globalCompositeOperation="destination-out",e.beginPath(),t(e,n,0,1440),e.lineTo(r/2,a/2),e.closePath(),e.fill(),e.restore()}function h(e,t){e.canvas;e.save();for(var r in t){var a=b[r].innerRadius,i=b[r].outerRadius,o=b[r].opacity,s=b[r].hoverOpacity,d=b[r].activeOpacity;e.fillStyle=b[r].color;for(var c=0;c<t[r].length;c++){var l,u=t[r][c].start,h=t[r][c].end;helpers.minutesToXY(t[r][c].end,a);l="undefined"!=typeof t[r][c].phantom?t[r][c].phantom:c,n(e,i,a,u,h),interactCanvas.isActive(r,l,"whole")||napchartCore.isSelected(r,l)?e.globalAlpha=d:interactCanvas.isActive(r,l)||interactCanvas.isHover(r,l,"whole")?e.globalAlpha=s:e.globalAlpha=o,e.fill()}}e.restore()}function f(e,t){e.save(),e.lineJoin="mittel";for(var r in t)if("undefined"!=typeof b[r].stroke){e.lineWidth=b[r].stroke.lineWidth;var a=b[r].innerRadius,i=b[r].outerRadius;e.strokeStyle=b[r].color;for(var o=0;o<t[r].length;o++){var s=t[r][o].start,d=t[r][o].end;n(e,i,a,s,d),e.stroke()}}e.restore()}function p(e,t){e.save();for(var r in t){var a=0,i=b[r].innerRadius;e.fillStyle=b[r].color;for(var o=0;o<t[r].length;o++){var s=o;if(interactCanvas.isActive(r,s)||napchartCore.isSelected(r,s)){e.save();var d=t[r][o].start,c=t[r][o].end;helpers.minutesToRadians(t[r][s].start),helpers.minutesToRadians(t[r][s].end),helpers.minutesToXY(t[r][s].end,a);n(e,i,a,d,c),e.globalAlpha=.1*e.globalAlpha,e.fill(),e.restore()}}}e.restore()}function m(e){draw.w,draw.h;return 1==S.blurCircle.opacity?u(e,S.blurCircle.radius*draw.ratio):(e.save(),e.fillStyle=S.background,e.globalAlpha=S.blurCircle.opacity,e.beginPath(),t(e,S.blurCircle.radius,0,1440),e.fill(),void e.restore())}function v(e,t){var n,r;e.save(),e.translate(draw.w/2,draw.h/2);for(var a in t)if("undefined"!=typeof b[a].rangeHandles&&b[a].rangeHandles)for(var i=0;i<t[a].length;i++){var o=t[a][i],d=i;if(napchartCore.isSelected(a,d))for(s=0;s<2;s++){var c=helpers.minutesToXY(o[["start","end"][s]],b[a].outerRadius*draw.ratio);interactCanvas.isActive(a,i,["start","end"][s])?(n="red",r="green"):interactCanvas.isHover(a,i,["start","end"][s])&&!interactCanvas.isActive(a,i)?(n="white",r="blue"):(n="white",r=b[a].color),e.fillStyle=n,e.beginPath(),e.arc(c.x,c.y,1*draw.ratio,0,2*Math.PI,!1),e.fill(),e.fillStyle=r,e.beginPath(),e.arc(c.x,c.y,.7*draw.ratio,0,2*Math.PI,!1),e.fill()}}e.restore()}function g(e,n,r,a){var i,o,s,d,c=[];if(a.indexOf(r.name)!=-1&&interactCanvas.isActive(r.name,r.count)){for(var l=0;l<a.length;l++)if("undefined"!=typeof n[a[l]])for(var u=0;u<n[a[l]].length;u++)"undefined"!=typeof n[a[l]][u]&&(i=n[a[l]][u],napchartCore.isSelected(a[l],u)&&(i.selected=!0),c.push(i));if(1!=c.length){c=c.sort(function(e,t){return e.start-t.start});for(var l=0;l<c.length;l++)"undefined"!=typeof c[l].selected&&(o=l);s=o-1,s<0&&(s=c.length-1),d=o+1,d>c.length-1&&(d=0);var h=45,f=36*draw.ratio,p=e.canvas,m=b.general.textSize*draw.ratio;e.save(),e.strokeStyle="#d2d2d2",e.strokeStyle=S.between.strokeColor,e.fillStyle=S.between.textColor,e.lineWidth=3,e.font=m+"px verdana",e.textAlign="center",e.textBaseline="middle",e.globalAlpha=e.globalAlpha*S.between.opacity;var v=[];v.push({start:c[s].end,end:c[o].start}),v.push({start:c[o].end,end:c[d].start}),v.forEach(function(n){var r,a,i,o,s;r=helpers.range(n.start,n.end),s=helpers.minutesToReadable(r,120),r<=720&&r>=60&&(a=helpers.calc(n.start,15),i=helpers.calc(n.end,-15),o=helpers.calc(a,r/2),middleXY=helpers.minutesToXY(o,f,p.width/2,p.height/2),e.beginPath(),t(e,h,a,i),e.stroke(),e.fillText(s,middleXY.x,middleXY.y))}),e.restore()}}}function w(e,t){var n,r,a,i,o,s,d={},s=22*draw.ratio,c=e.canvas;r=t.name,a=t.count,n=napchartCore.returnElement(r,a),i=helpers.minutesToReadable(helpers.range(n.start,n.end),120),o=helpers.middle(n.start,n.end),d=helpers.minutesToXY(o,s,c.width/2,c.height/2),e.save(),e.font=b.general.textSize*draw.ratio+"px verdana",e.fillStyle=b.general.color,e.textAlign="center",e.textBaseline="middle",e.globalAlpha=.6*e.globalAlpha,e.fillText(i,d.x,d.y),e.restore()}function y(e,t){var n,r,a,i,o,s,d,c={},l=[],u=e.canvas;r=t.name,a=t.count,n=napchartCore.returnElement(r,a),i=helpers.range(n.start,n.end),o=S.timeLocation,s=(b[r].outerRadius+o)*draw.ratio,l.push({minutes:n.start}),i>90&&l.push({minutes:n.end}),e.save(),e.font=3*draw.ratio+"px verdana",e.fillStyle=b.general.color,e.textAlign="center",e.textBaseline="middle",e.globalAlpha=.4*e.globalAlpha;for(var h=0;h<l.length;h++)minutes=l[h].minutes,minutes%240<=15||minutes%240>=225||(d=helpers.minutesToClock(minutes),c=helpers.minutesToXY(minutes,s,u.width/2,u.height/2),e.fillText(d,c.x,c.y));e.restore()}function C(){var e=napchartCore.getSchedule();draw.drawFrame(e),window.requestAnimationFrame(C)}var b={core:{stack:0,color:"#c70e0e",innerRadius:29,outerRadius:40,stroke:{lineWidth:2},rangeHandles:!0,opacity:.6,hoverOpacity:.5,activeOpacity:.5,selected:{strokeColor:"#FF6363",lineWidth:1,expand:.5}},nap:{stack:1,color:"#c70e0e",innerRadius:29,outerRadius:40,stroke:{lineWidth:2},opacity:.6,hoverOpacity:.5,activeOpacity:.5,selected:{strokeColor:"grey",lineWidth:1,expand:.5}},busy:{stack:2,color:"#1f1f1f",innerRadius:29,outerRadius:36,stroke:{lineWidth:2},rangeHandles:!0,opacity:.6,hoverOpacity:.5,activeOpacity:.5,selected:{strokeColor:"#FF6363",lineWidth:1,expand:.5}},general:{textSize:4,color:"black"}},k={core:{color:"#733134",opacity:.7,hoverOpacity:.7,activeOpacity:.7,selected:{strokeColor:"#FF6363",lineWidth:1,expand:.5}},nap:{color:"#c70e0e",opacity:.7,hoverOpacity:.7,activeOpacity:.7,selected:{strokeColor:"#FF6363",lineWidth:1,expand:.5}},busy:{color:"#9E9E9E",opacity:.6,hoverOpacity:.5,activeOpacity:.5,selected:{strokeColor:"#FF6363",lineWidth:1,expand:.5}},general:{color:"white"}},S={background:"#F4F4F4",circles:[{radius:36},{radius:29},{radius:20},{radius:2}],clearCircle:20,blurCircle:{radius:29,opacity:.8},stroke:.32,strokeColor:"#C9C9C9",impStrokeColor:"#262626",clockNumbers:{radius:44,color:"#262626"},between:{strokeColor:"#d2d2d2",textColor:"black",opacity:.5},timeLocation:4},x={background:"#373737",circles:[{radius:36},{radius:29},{radius:20},{radius:2}],clearCircle:20,blurCircle:{radius:29,opacity:.5},stroke:.32,strokeColor:"#525252",impStrokeColor:"EDEDED",clockNumbers:{radius:44,color:"#BFBFBF"},between:{strokeColor:"#A5A5A5",textColor:"white",opacity:.9},timeLocation:4};return{initialize:function(t){var n=t.parentNode,r=Math.min(n.clientWidth,400);console.log(n.clientWidth,400),t.width=r,t.height=r,console.log("size",r);var i,s=document.createElement("canvas"),c=s.getContext("2d");settings.getValue("ampm")?(i=!0,this.ratio=r/103):this.ratio=r/96,this.drawRatio=this.ratio;var h=t.getContext("2d"),f=window.devicePixelRatio||14,p=h.webkitBackingStorePixelRatio||h.mozBackingStorePixelRatio||h.msBackingStorePixelRatio||h.oBackingStorePixelRatio||h.backingStorePixelRatio||1;console.log("backingstore:",p),console.log("dpr:",f);var m=f/p;if(f!==p){console.log("upscaling");var v=t.width,g=t.height;t.width=v*m,t.height=g*m,t.style.width=v+"px",t.style.height=g+"px",this.ratio*=m}this.ctx=h,this.w=t.width,this.h=t.height;var w=[{type:"arc",radians:2*Math.PI}];s.height=t.width,s.width=t.width,e(c,w),a(c),u(c,S.clearCircle),d(c),o(c),l(c,i),this.cachedBackground=s,C()},reInit:function(){draw.initialize(draw.ctx.canvas)},drawFrame:function(e,t){if("undefined"==typeof e)throw new Error("drawFrame did not receive data in argument");var n,a,i;if(e=JSON.parse(JSON.stringify(e)),n=r(e,"busy","nap"),a=napchartCore.returnSelected()[0],i=draw.ctx,i.clearRect(0,0,draw.w,draw.h),"undefined"==typeof this.cachedBackground)throw new Error("Could not find the initialized off-screen canvas. Try running draw.initialize()");i.drawImage(this.cachedBackground,0,0),h(i,n),m(i),f(i,n);for(var o in e)if("busy"!=o)for(var s=0;s<e[o].length;s++)w(i,{name:o,count:s}),y(i,{name:o,count:s});i.save(),i.globalAlpha=interactCanvas.getSelectedOpacity(),p(i,e),v(i,e),"undefined"!=typeof a&&(g(i,e,a,["nap","core"]),"busy"==a.name&&(w(i,a),y(i,a))),i.restore()},drawUpdate:function(){console.log("drawUpdate"),requestUpdate=!0},getBarConfig:function(){return JSON.parse(JSON.stringify(b))},getImage:function(){var e,t=draw.ctx,n=t.canvas;return e=n.toDataURL()},changeClockConfig:function(e,t){S[e]=t},dmToggle:function(e){e?(normalBarConfig=helpers.clone(b),normalClockConfig=helpers.clone(S),b=helpers.overwrite(b,k),S=helpers.overwrite(S,x)):(b=helpers.overwrite(b,normalBarConfig),S=helpers.overwrite(S,normalClockConfig)),draw.reInit(),draw.drawUpdate()}}}(),window.interactCanvas=function(){function e(e,t){var n,r,a=t.getBoundingClientRect(),i=interactCanvas.canvas.width,o=interactCanvas.canvas.height;return e.changedTouches?(n=e.changedTouches[0].clientX-a.left,r=e.changedTouches[0].clientY-a.top):(n=e.clientX-a.left,r=e.clientY-a.top),{x:n-i/2,y:r-o/2}}function t(e){var t,n,r,a,i=(napchartCore.getCanvas(),i=napchartCore.getSchedule()),o=draw.getBarConfig(),d={};for(var c in i)if("undefined"!=typeof o[c].rangeHandles&&o[c].rangeHandles)for(r=0;r<i[c].length;r++)if(napchartCore.isSelected(c,r))for(s=0;s<2;s++)t=i[c][r][["start","end"][s]],n=helpers.minutesToXY(t,o[c].outerRadius*draw.drawRatio),a=helpers.distance(n.x,n.y,e.x,e.y),a<v*draw.drawRatio&&("undefined"==typeof d.distance||a<d.distance)&&(d={name:c,count:r,type:["start","end"][s],distance:a});if(0==Object.keys(d).length){var l,u,h,f,p,m,g;l=helpers.XYtoMinutes(e.x,e.y),u=helpers.distance(e.x,e.y,0,0);for(var c in i)for(r=0;r<i[c].length;r++)h=i[c][r].start,f=i[c][r].end,helpers.pointIsInside(l,h,f)&&(m=o[c].innerRadius*draw.drawRatio,p=o[c].outerRadius*draw.drawRatio,u>m&&u<p&&(g=helpers.calc(l,-h),d={name:c,count:r,type:"whole",positionInElement:g}));if(settings.getValue("moveSim")&&("core"==d.name||"nap"==d.name)){var i=napchartCore.getSchedule(),w={name:d.name,count:d.count};d={},d.elements=[],d.master={name:w.name,count:w.count};for(var c in i)if("busy"!=c)for(var r=0;r<i[c].length;r++)h=i[c][r].start,g=helpers.calc(l,-h),d.elements.push({name:c,count:r,type:"whole",positionInElement:g})}}return d}function n(n){var r=napchartCore.getCanvas(),a=e(n,r);napchartCore.getSchedule(),draw.getBarConfig();helpers.requestAnimFrame.call(window,draw.drawUpdate);var i=t(a);p=i}function r(n){n.stopPropagation();var r=n.target||n.srcElement,s=e(n,r),d={};
return console.log("click: ",s),d=t(s),0==Object.keys(d).length?void o():(n.preventDefault(),"undefined"!=typeof n.changedTouches?d.identifier=n.changedTouches[0].identifier:d.identifier="mouse",d.canvas=r,0===m.length&&o(),m.push(d),"undefined"!=typeof n.changedTouches?document.addEventListener("touchmove",a):document.addEventListener("mousemove",a),i(d.name,d.count),a(n),void helpers.requestAnimFrame.call(window,draw.drawUpdate))}function a(t){function n(e){napchartCore.modifyElement(e.name,e.count,e.values)}function r(e,t){o=e.name,s=e.count,l=napchartCore.returnElement(o,s),"start"==e.type?(v=h(f),w={start:v}):"end"==e.type?(g=h(f),w={end:g}):"whole"==e.type&&(p=e.positionInElement,m=helpers.range(l.start,l.end),v=helpers.calc(f,-p),"undefined"!=typeof x&&(v=h(v)),g=helpers.calc(v,m),w={start:v,end:g}),t(o,s,w)}var a;a=d(t);var i,o,s,l,u,f,p,m,v,g,w={};if(i=c(a))if(u=e(t,i.canvas),f=helpers.XYtoMinutes(u.x,u.y),"undefined"!=typeof i.elements){var y=[],C={};i.elements.some(function(e){r(e,function(e,t,n){e==i.master.name&&t==i.master.count&&(C=n),y.push({name:e,count:t,values:n})})});for(var b=C.start,k=h(b)-b,S=0;S<y.length;S++)y[S].values.start=helpers.calc(y[S].values.start,k),y[S].values.end=helpers.calc(y[S].values.end,k);console.log(y),y.forEach(n)}else{var x=!0;r(i,function(e,t,n){napchartCore.modifyElement(e,t,n)})}}function i(e,t){if(settings.getValue("moveSim")&&"busy"!=e){var n=napchartCore.getSchedule();for(var e in n)if("busy"!=e)for(var r=0;r<n[e].length;r++)napchartCore.setSelected(e,r)}napchartCore.setSelected(e,t)}function o(e,t){"undefined"==typeof e&&(napchartCore.deselect(),document.removeEventListener("touchmove",a),document.removeEventListener("mousemove",a)),napchartCore.deselect(e,t)}function d(e){return e.type.search("mouse")>=0?"mouse":(console.log(e),e.changedTouches[0].identifier)}function c(e){for(var t=0;t<m.length;t++)if(m[t].identifier==e)return m[t];return!1}function l(e){for(var t=0;t<m.length;t++)m[t].identifier==e&&m.splice(t,1)}function u(e){var t=d(e),n=c(t);0!=m.length&&chartHistory.add(napchartCore.getSchedule(),"moved "+n.name+" "+(n.count+1)),l(t),helpers.requestAnimFrame.call(window,draw.drawUpdate)}function h(e){var t=e;return settings.getValue("snap10")?t=10*Math.round(e/10):settings.getValue("snap5")?t=5*Math.round(e/5):e%60<7?t=e-e%60:e%60>53?t=e+(60-e%60):(e+=30,e%60<5?t=e-e%60-30:e%60>55&&(t=e+(60-e%60)-30)),t}function f(e,t,n,r){function a(e){if(t==e.name&&n==e.count&&("undefined"==typeof r||r==e.type))return!0}return"undefined"!=typeof e.elements?e.elements.some(a):a(e)}var p={},m=[],v=6,g=1;return{initialize:function(e){e.addEventListener("mousemove",n),e.addEventListener("mousedown",r),e.addEventListener("touchstart",r),document.addEventListener("mouseup",u),document.addEventListener("touchend",u),document.addEventListener("touchstart",o);var t=window.getComputedStyle(e),a=t.getPropertyValue("width").replace("px",""),i=t.getPropertyValue("height").replace("px","");interactCanvas.canvas={width:a,height:i}},isActive:function(e,t,n){return m.some(function(r){return f(r,e,t,n)})},isHover:function(e,t,n){return f(p,e,t,n)},getSelectedOpacity:function(){return g},setSelectedOpacity:function(e){g=e}}}(),window.chartHistory=function(){function e(e){return"undefined"==typeof r[e]?void console.warn("history element does not exist"):("undefined"!=typeof r[e].chartid&&napchartCore.setURL(r[e].chartid),napchartCore.setSchedule(r[e].data),void(n=e))}function t(){var e="black-text grey lighten-3 waves-effect",t="grey-text grey lighten-2 disabled";n==r.length-1?($(".history#forward").removeClass(e),$(".history#forward").addClass(t)):($(".history#forward").removeClass(t),$(".history#forward").addClass(e)),0==n?($(".history#back").removeClass(e),$(".history#back").addClass(t)):($(".history#back").removeClass(t),$(".history#back").addClass(e))}var n=-1,r=[];return{initialize:function(e){chartHistory.add(e,""),dom.bindBackForward(),t()},add:function(e,a){e=helpers.clone(e),r.length>0&&JSON.stringify(e)==JSON.stringify(r[r.length-1].data)||(n!=r.length-1&&r.splice(n+1,r.length-(n+1)),r.push({data:e,action:a}),n++,t())},back:function(){return n==-1?void console.warn("can't undo more"):(e(n-1),void t())},forward:function(){return n==r.length-1?void console.warn("already at latest element"):(e(n+1),void t())},setChartid:function(e){r[n].chartid=e},checkIfExists:function(e){var t,n=JSON.stringify(e);for(var a in r)if(t=r[a],"undefined"!=typeof t.chartid&&JSON.stringify(t.data)==n)return t.chartid;return!1}}}(),window.statistics=function(){function e(e,t){for(var n=0,r=0;r<e.length;r++)"undefined"!=typeof e[r]&&(n+=helpers.calc(e[r].end,-e[r].start));return 1==t&&(n=1440-n),n}var t;return{initialize:function(e){t=e},update:function(t){var n,r;n=e(helpers.merge(t,["core","nap"])),n=helpers.minutesToReadable(n),r=e(helpers.merge(t,["nap","core","busy"]),!0),r=helpers.minutesToReadable(r),$(".sleep.stat-time").html(n),$(".free.stat-time").html(r)}}}(),window.textSerialize=function(){function e(e){var e=helpers.clone(e),t="";for(var n in e){e[n]=e[n].sort(function(e,t){return e.start-t.start});for(var r,a,i=n[0].toUpperCase()+n.slice(1),o=0;o<e[n].length;o++)r=helpers.minutesToClock(e[n][o].start),a=helpers.minutesToClock(e[n][o].end),t.length>0&&(t+="\n"),t+=i+" "+(o+1)+": "+r+" - "+a}return t}function t(){$(a).parent().parent().addClass("flash"),setTimeout(function(){$(a).parent().parent().removeClass("flash")},2e3)}function n(){var e=(a.value.match(/\n/g)||[]).length;e<4?e=4:e++,a.rows=e}var r,a=document.getElementById("textSchedule");return{update:function(t){if("undefined"==typeof t)var t=r;var i=e(t);helpers.compare(t,r)||(a.innerHTML=i,n(),r=t)},setChartid:function(e){var r="http://"+fromServer.url+"/"+e;textSerialize.update(),t(),a.innerHTML.search(r)>=0||(a.innerHTML+="\n"+r,n())}}}(),window.formInput=function(){function e(e,t){if($("body").hasClass("dark"))var n="dark";else var n="";var r,a;if(r=e+t,a='<div class="'+r+n+' inputBox">',a+=e+" "+(t+1),a+=':  <input class="clock start formInput'+n+'" length="4" type="text">',"nap"==e){var i=napchartCore.returnElement(e,t),o=helpers.calc(i.end,-i.start);a+=' - <input class="duration formInput" type="number" min="10" max="90" value="'+o+'"> min'}else a+=' - <input class="clock end formInput" length="4" type="text">';a+='<input type="hidden" name="name" value="'+e+'">',a+='<input type="hidden" name="count" value="'+t+'">',a+='<button class="remove"> <i class="fa fa-trash-o"></i> </button>',a+="</div>",$(s).append(a)}function t(e,t){return $(s).find("."+e+t).length>0}function n(n){var r,a,o;if("undefined"==typeof n)var n=c;for(var l in n)for(i=0;i<n[l].length;i++)t(l,i)||e(l,i),r=$(s).find("."+l+i),a=helpers.minutesToClock(n[l][i].start),o=helpers.minutesToClock(n[l][i].end),r.find(".start").val(a),r.find(".end").val(o);d?$(s).children().removeClass("hidden"):$(s).children().not(".selected").addClass("hidden"),c=n}function r(e){var t,n;$.each($(s).find(".inputBox"),function(e,r){t=$(r).find('[name="name"]').val(),n=$(r).find('[name="count"]').val(),napchartCore.elementExists(t,n)||$(r).remove()})}function a(){var e,t,n,r,a,i,s={};if(e=$(this).parent(),t=$(e).find('[name="name"]').val(),n=$(e).find('[name="count"]').val(),$(this).hasClass("start")?r="start":$(this).hasClass("end")?r="end":$(this).hasClass("duration")&&(r="duration"),"duration"==r){var d=napchartCore.returnElement(t,n).start;a=helpers.calc(d,1*this.value),r="end"}else i=o($(this).val()),$(this).val(i),a=helpers.clockToMinutes(i);s[r]=a,napchartCore.modifyElement(t,n,s)}function o(e){var t,n;return 1==e.length&&(e="0"+e+"00"),2==e.length&&(e+="00"),3==e.length&&(e="0"+e),t=e.substring(0,2),n=e.substring(2,4),t<=23&&n<=59&&e}var s,d,c;return{initialize:function(e){s=e,dom.bindRemoveButtons(s),$(s).on("blur",".clock",a),$(s).on("change",".duration",a),s.addEventListener("mousedown",function(e){e.stopPropagation()})},setData:function(e){n(e),r(e)},setSelected:function(e){return $(s).children().removeClass("selected"),"undefined"==typeof e?void(selected=[]):void e.forEach(function(e){$(s).find("."+e.name+e.count).addClass("selected").removeClass("hidden")})},deselect:function(){},setSettings:function(e){d=e.showAllElements,console.log(d),n()}}}();
//# sourceMappingURL=data:application/json;base64,
